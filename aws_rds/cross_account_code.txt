import boto3

# Create a client for the Security Token Service (STS) in the target account.
sts_client = boto3.client('sts')

# Assume the role in the target account (change the role ARN and session name as needed).
assumed_role = sts_client.assume_role(
    RoleArn='arn:aws:iam::TARGET_ACCOUNT_ID:role/ROLE_NAME',
    RoleSessionName='CrossAccountSession'
)

# Retrieve temporary credentials from the assumed role.
temporary_credentials = assumed_role['Credentials']

# Use the temporary credentials to access resources in the source account.
s3_client = boto3.client(
    's3',
    aws_access_key_id=temporary_credentials['AccessKeyId'],
    aws_secret_access_key=temporary_credentials['SecretAccessKey'],
    aws_session_token=temporary_credentials['SessionToken']
)

# Now, you can use the `s3_client` to access S3 resources in the source account.
response = s3_client.list_buckets()


link for cross account
https://repost.aws/knowledge-center/lambda-function-assume-iam-role

 create trustpolicy for a role and attach all required perimmisions
target account
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Principal": {
                "AWS": "arn:aws:iam::111111111111:role/my-lambda-execution-role"
            },
            "Action": "sts:AssumeRole"
        }
    ]
}

source account


    "Version": "2012-10-17",
    "Statement": {
        "Effect": "Allow",
        "Action": "sts:AssumeRole",
        "Resource": "arn:aws:iam::222222222222:role/role-on-source-account"
    }
}

sts_connection = boto3.client('sts')
    acct_b = sts_connection.assume_role(
        RoleArn="arn:aws:iam::accountid:role/rolename",
        RoleSessionName="cross_acct_lambda"
    )

    ACCESS_KEY = acct_b['Credentials']['AccessKeyId']
    SECRET_KEY = acct_b['Credentials']['SecretAccessKey']
    SESSION_TOKEN = acct_b['Credentials']['SessionToken']

    # create service client using the assumed role credentials, e.g. S3
    client = boto3.client(
        'ec2',
        aws_access_key_id=ACCESS_KEY,
        aws_secret_access_key=SECRET_KEY,
        aws_session_token=SESSION_TOKEN,
    )
